#+OPTIONS: toc:nil
#+OPTIONS: ^:{}

* RFC7662 Token

** Request

| Name            | Required | Description            |
|-----------------+----------+------------------------|
| token           | Yes      | the token              |
|-----------------+----------+------------------------|
| token_type_hint | Optional | 便于 Server 查找 token |
|-----------------+----------+------------------------|

*Example:*

#+BEGIN_SRC shell
POST /introspect HTTP/1.1
Host: server.example.com
Accept: application/json
Content-Type: application/x-www-form-urlencoded
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

token=mF_9.B5f-4.1JqM&token_type_hint=access_token
#+END_SRC


*** Token Checker

Server 检查 token 时需要考虑以下情况：

- 如果 token 设置了 expire

  Server 就必须检查 token 是否 expired

- 如果 token 在能够使用之前就被下发

  Server 就必须检查 token 的初始生效时间

- 如果 token 被撤销

  Server 就必须检查 token 是否被撤销

- 如果 token 被签名了

  Server 就必须检查签名的有效性

- 如何 token 只能被某些资源服务器使用

  Server 就必须检查 token 的权限范围

如果上面的任一项失败了，Server 就应该返回 token 无效


** Response

| Name       | Type      | Required | Description                                            |
|------------+-----------+----------+--------------------------------------------------------|
| active     | bool      | Yes      | 标识 token 是否有效，如果无效就不应该返回其它信息了    |
| scope      | string    | Optional | 以空格分隔的字符串，标识 token 的权限范围              |
|------------+-----------+----------+--------------------------------------------------------|
| client_id  | string    | Optional | 客户端 id                                              |
|------------+-----------+----------+--------------------------------------------------------|
| username   | string    | Optional | 可友好阅读的用户名                                     |
|------------+-----------+----------+--------------------------------------------------------|
| token_type | string    | Optional | token 类型，分为：bearer 和 mac                        |
|------------+-----------+----------+--------------------------------------------------------|
| exp        | timestamp | Optional | 过期时间                                               |
|------------+-----------+----------+--------------------------------------------------------|
| iat        | timestamp | Optional | token 初始下发时间                                     |
|------------+-----------+----------+--------------------------------------------------------|
| nbf        | timestamp | Optional | token 在 nbf 时间之前无效，不应处理                    |
|------------+-----------+----------+--------------------------------------------------------|
| sub        | string    | Optional | 声明 token 的委托人，通常用于处理指定应用              |
|------------+-----------+----------+--------------------------------------------------------|
| aud        | string    | Optional | 声明 token 的接受人                                    |
|------------+-----------+----------+--------------------------------------------------------|
| iss        | string    | Optional | 声明 token 的发行人                                    |
|------------+-----------+----------+--------------------------------------------------------|
| jti        | string    | Optional | token 的 UUID, 不同发行人对于相同的 token jti 应该不同 |
|------------+-----------+----------+--------------------------------------------------------|


*Example:*

#+BEGIN_SRC shell
HTTP/1.1 200 OK
Content-Type: application/json

{
"active": true,
"client_id": "l238j323ds-23ij4",
"username": "jdoe",
"scope": "read write dolphin",
"sub": "Z5O3upPC88QrAjx00dis",
"aud": "https://protected.example.net/resource",
"iss": "https://server.example.com/",
"exp": 1419356238,
"iat": 1419350238,
"extension_field": "twenty-seven"
}
#+END_SRC


** 流程

#+BEGIN_SRC shell
    ----------------------                                            ----------
   |                      |                                          |          |
   | Sync Resource Server |                                          | Client 1 |
   |                      |               -------------              |          |
    ----------------------               |             |              ----------
                                         | Auth Server |
    -----------------------              |             |              ----------
   |                      |               -------------              |          |
   | Apps Resource Server |                                          | Client 2 |
   |                      |                                          |          |
    ----------------------                                            ----------


                                          ------------
                                         |            |
                                         | User Agent |
                                         |            |
                                          ------------
#+END_SRC

如上图，用户访问 =Resource Server= 有2中方式：

1. 直接访问，通过 =Auth Server= 认证后直接获取资源
2. 通过 =Client= 访问，首先依然要先通过 =Auth Server= 认证，然后由 =Client= 去访问 =Resource Server=

这里都涉及一个权限的问题，需要知道有没有权限去操作 =Resource Server=, 归纳为2个步骤：先认证后鉴权

直接访问 =Resource Server= 的流程如下：

1. 在 =Auth Server= 处认证用户，成功后返回 =token= 及 =scope=
2. =Resource Server= 检查 =scope= 中的权限
3. 若没有权限就返回错误，若有权限 =Resource Server= 就下发 =Private Token= 及 =scope= 给用户
4. 用户拿着 =Private Token= 去操作 =scope= 对应的资源


使用 =Client= 访问的流程如下：

1. 在 =Auth Server= 处认证用户，成功后返回 =token= 及 =scope=
2. =client= 检查 =scope=
2. =client= 拿着 =token= 向 =Auth Server= 申请某种 =scope= 的 =scope token=
3. =client= 拿着 =scope token= 向 =Resource Server= 获取资源
4. =Resource Server= 拿着 =scope token= 向 =Auth Server= 验证
5. 验证失败就返回错误，成功就保存 =scope token= 及 =scope= 然后返回对应的操作结果

所有需要添加 =scope token= 相关的接口，如下：

- [POST] /scope/token

  申请 =scope token=

  Header 中包含 =user token=, Body 中包含 =scope=, =sub= 可选, 返回 =scope token=, =sub=, =aud=, =iss= 其他的可选

- [Get] /scope/token

  校验 =scope token=

  Header 中包含 =user token=, =scope token=, 返回 =active=, =scope=, =sub=, =aud=, =iss= 其他的可选

- [DELETE] /scope/token

  撤销 =scope token=

  Header 中包含 =user token=, =scope token=


*注意：* =Resource Server= 也需要通过 token 撤销接口，另外 =token= 中应该包含 =scope= 的信息
