/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__org_freedesktop_dbus_h__PROXY_MARSHAL_H
#define __dbusxx__org_freedesktop_dbus_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>
#include <iostream>

namespace org {
namespace freedesktop {

class DBus_proxy
: public ::DBus::InterfaceProxy
{
public:

    DBus_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.DBus")
    {
        connect_signal(DBus_proxy, NameOwnerChanged, _NameOwnerChanged_stub);
        connect_signal(DBus_proxy, NameLost, _NameLost_stub);
        connect_signal(DBus_proxy, NameAcquired, _NameAcquired_stub);
    }

public:

    /* properties exported by this interface */
        const std::vector< std::string > Features() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.DBus";
            const std::string property_name  = "Features";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
        const std::vector< std::string > Interfaces() {
            ::DBus::CallMessage call ;
             call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
            ::DBus::MessageIter wi = call.writer();
            const std::string interface_name = "org.freedesktop.DBus";
            const std::string property_name  = "Interfaces";
            wi << interface_name;
            wi << property_name;
            ::DBus::Message ret = this->invoke_method (call);
            ::DBus::MessageIter ri = ret.reader ();
            ::DBus::Variant argout;
            ri >> argout;
            return argout;
        };
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string Hello()
    {
        ::DBus::CallMessage call;
        call.member("Hello");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    uint32_t RequestName(const std::string& argin0, const uint32_t& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("RequestName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t ReleaseName(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("ReleaseName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t StartServiceByName(const std::string& argin0, const uint32_t& argin1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        wi << argin1;
        call.member("StartServiceByName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void UpdateActivationEnvironment(const std::map< std::string, std::string >& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("UpdateActivationEnvironment");
        ::DBus::Message ret = invoke_method (call);
    }

    bool NameHasOwner(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("NameHasOwner");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > ListNames()
    {
        ::DBus::CallMessage call;
        call.member("ListNames");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > ListActivatableNames()
    {
        ::DBus::CallMessage call;
        call.member("ListActivatableNames");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    void AddMatch(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("AddMatch");
        ::DBus::Message ret = invoke_method (call);
    }

    void RemoveMatch(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("RemoveMatch");
        ::DBus::Message ret = invoke_method (call);
    }

    std::string GetNameOwner(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetNameOwner");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > ListQueuedOwners(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("ListQueuedOwners");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetConnectionUnixUser(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetConnectionUnixUser");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetConnectionUnixProcessID(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetConnectionUnixProcessID");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetAdtAuditSessionData(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetAdtAuditSessionData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< uint8_t > GetConnectionSELinuxSecurityContext(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetConnectionSELinuxSecurityContext");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< uint8_t > argout;
        ri >> argout;
        return argout;
    }

    void ReloadConfig()
    {
        ::DBus::CallMessage call;
        call.member("ReloadConfig");
        ::DBus::Message ret = invoke_method (call);
    }

    std::string GetId()
    {
        ::DBus::CallMessage call;
        call.member("GetId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::map< std::string, ::DBus::Variant > GetConnectionCredentials(const std::string& argin0)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << argin0;
        call.member("GetConnectionCredentials");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void NameOwnerChanged(const std::string& argin0, const std::string& argin1, const std::string& argin2) = 0;
    virtual void NameLost(const std::string& argin0) = 0;
    virtual void NameAcquired(const std::string& argin0) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _NameOwnerChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        std::string arg1;
        ri >> arg1;
        std::string arg2;
        ri >> arg2;
        NameOwnerChanged(arg0, arg1, arg2);
    }
    void _NameLost_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        NameLost(arg0);
    }
    void _NameAcquired_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string arg0;
        ri >> arg0;
        NameAcquired(arg0);
    }
};

} }
#endif //__dbusxx__org_freedesktop_dbus_h__PROXY_MARSHAL_H
